// <auto-generated />
using System;
using Lunia.V4.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Lunia.V4.Infrastructure.Persistence.Migrations.Lobby
{
    [DbContext(typeof(LobbyDbContext))]
    [Migration("20250725214411_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("lobby")
                .HasAnnotation("Npgsql:CollationDefinition:case_insensitive", "und-u-ks-level2,und-u-ks-level2,icu,False")
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Lunia.V4.Domain.Entities.Account", b =>
                {
                    b.Property<string>("AccountName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("account_name")
                        .UseCollation("case_insensitive");

                    b.Property<int>("CharacterCount")
                        .HasColumnType("integer")
                        .HasColumnName("character_count");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("LastLoggedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_logged_at");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<int>("SlotCount")
                        .HasColumnType("integer")
                        .HasColumnName("slot_count");

                    b.HasKey("AccountName")
                        .HasName("pk_accounts");

                    b.ToTable("accounts", "lobby");

                    b.HasData(
                        new
                        {
                            AccountName = "kaneshaw",
                            CharacterCount = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 3, 18, 2, 47, 43, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PasswordHash = "a7a59ae9ae908f86ff05250e113eda17",
                            SlotCount = 4
                        });
                });

            modelBuilder.Entity("Lunia.V4.Domain.Entities.Block", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("account_name")
                        .UseCollation("case_insensitive");

                    b.Property<string>("CharacterName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("character_name");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("RemoteIp")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("remote_ip");

                    b.HasKey("Id")
                        .HasName("pk_blocking");

                    b.ToTable("blocking", "lobby");
                });

            modelBuilder.Entity("Lunia.V4.Domain.Entities.Character", b =>
                {
                    b.Property<string>("CharacterName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("character_name");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("account_name");

                    b.Property<long>("BankMoney")
                        .HasColumnType("bigint")
                        .HasColumnName("bank_money");

                    b.Property<int>("ClassNumber")
                        .HasColumnType("integer")
                        .HasColumnName("class_number");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("ExtraBagCount")
                        .HasColumnType("integer")
                        .HasColumnName("extra_bag_count");

                    b.Property<int>("ExtraBankBagCount")
                        .HasColumnType("integer")
                        .HasColumnName("extra_bank_bag_count");

                    b.Property<long>("GameMoney")
                        .HasColumnType("bigint")
                        .HasColumnName("game_money");

                    b.Property<int>("GmLevel")
                        .HasColumnType("integer")
                        .HasColumnName("gm_level");

                    b.Property<int>("InstantStateFlags")
                        .HasColumnType("integer")
                        .HasColumnName("instant_state_flags");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("LastLoggedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_logged_at");

                    b.Property<int>("PvpExp")
                        .HasColumnType("integer")
                        .HasColumnName("pvp_exp");

                    b.Property<int>("PvpLevel")
                        .HasColumnType("integer")
                        .HasColumnName("pvp_level");

                    b.Property<int>("SkillPoint")
                        .HasColumnType("integer")
                        .HasColumnName("skill_point");

                    b.Property<int>("StageExp")
                        .HasColumnType("integer")
                        .HasColumnName("stage_exp");

                    b.Property<int>("StageLevel")
                        .HasColumnType("integer")
                        .HasColumnName("stage_level");

                    b.Property<int>("VirtualIdCode")
                        .HasColumnType("integer")
                        .HasColumnName("virtual_id_code");

                    b.Property<int>("WarExp")
                        .HasColumnType("integer")
                        .HasColumnName("war_exp");

                    b.Property<int>("WarLevel")
                        .HasColumnType("integer")
                        .HasColumnName("war_level");

                    b.HasKey("CharacterName")
                        .HasName("pk_characters");

                    b.HasIndex("AccountName")
                        .HasDatabaseName("ix_characters_account_name");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_characters_is_deleted");

                    b.ToTable("characters", "lobby");

                    b.HasData(
                        new
                        {
                            CharacterName = "YamYam",
                            AccountName = "kaneshaw",
                            BankMoney = 0L,
                            ClassNumber = 0,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 3, 18, 2, 5, 35, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExtraBagCount = 0,
                            ExtraBankBagCount = 0,
                            GameMoney = 10999999L,
                            GmLevel = 0,
                            InstantStateFlags = 0,
                            IsDeleted = false,
                            PvpExp = 0,
                            PvpLevel = 1,
                            SkillPoint = 200,
                            StageExp = 0,
                            StageLevel = 99,
                            VirtualIdCode = 2130706433,
                            WarExp = 0,
                            WarLevel = 1
                        },
                        new
                        {
                            CharacterName = "Mordio",
                            AccountName = "kaneshaw",
                            BankMoney = 0L,
                            ClassNumber = 13,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 3, 18, 2, 40, 13, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExtraBagCount = 0,
                            ExtraBankBagCount = 0,
                            GameMoney = 0L,
                            GmLevel = 0,
                            InstantStateFlags = 0,
                            IsDeleted = false,
                            PvpExp = 0,
                            PvpLevel = 1,
                            SkillPoint = 6,
                            StageExp = 0,
                            StageLevel = 99,
                            VirtualIdCode = 2130706434,
                            WarExp = 0,
                            WarLevel = 1
                        });
                });

            modelBuilder.Entity("Lunia.V4.Domain.Entities.CharacterLicense", b =>
                {
                    b.Property<string>("AccountName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("account_name");

                    b.Property<int>("ClassNumber")
                        .HasColumnType("integer")
                        .HasColumnName("class_number");

                    b.HasKey("AccountName", "ClassNumber")
                        .HasName("pk_character_licenses");

                    b.ToTable("character_licenses", "lobby");
                });

            modelBuilder.Entity("Lunia.V4.Domain.Entities.CharacterRebirth", b =>
                {
                    b.Property<string>("CharacterName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("character_name");

                    b.Property<int>("GmLevel")
                        .HasColumnType("integer")
                        .HasColumnName("gm_level");

                    b.Property<DateTimeOffset>("LastRebirthAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_rebirth_at");

                    b.Property<int>("RebirthCount")
                        .HasColumnType("integer")
                        .HasColumnName("rebirth_count");

                    b.Property<int>("SkillPoint")
                        .HasColumnType("integer")
                        .HasColumnName("skill_point");

                    b.Property<int>("StoredLevel")
                        .HasColumnType("integer")
                        .HasColumnName("stored_level");

                    b.HasKey("CharacterName")
                        .HasName("pk_character_rebirths");

                    b.ToTable("character_rebirths", "lobby");

                    b.HasData(
                        new
                        {
                            CharacterName = "Mordio",
                            GmLevel = 0,
                            LastRebirthAt = new DateTimeOffset(new DateTime(2020, 3, 18, 2, 42, 52, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RebirthCount = 1,
                            SkillPoint = 5,
                            StoredLevel = 100
                        },
                        new
                        {
                            CharacterName = "YamYam",
                            GmLevel = 0,
                            LastRebirthAt = new DateTimeOffset(new DateTime(2021, 3, 18, 2, 38, 21, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RebirthCount = 3,
                            SkillPoint = 15,
                            StoredLevel = 102
                        });
                });

            modelBuilder.Entity("Lunia.V4.Domain.Entities.Item", b =>
                {
                    b.Property<string>("CharacterName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("character_name");

                    b.Property<int>("BagNumber")
                        .HasColumnType("integer")
                        .HasColumnName("bag_number");

                    b.Property<int>("PositionNumber")
                        .HasColumnType("integer")
                        .HasColumnName("position_number");

                    b.Property<long>("Instance")
                        .HasColumnType("bigint")
                        .HasColumnName("instance");

                    b.Property<bool>("IsOnBank")
                        .HasColumnType("boolean")
                        .HasColumnName("is_on_bank");

                    b.Property<int>("ItemHash")
                        .HasColumnType("integer")
                        .HasColumnName("item_hash");

                    b.Property<long?>("ItemSerial")
                        .HasColumnType("bigint")
                        .HasColumnName("item_serial");

                    b.Property<int>("StackedCount")
                        .HasColumnType("integer")
                        .HasColumnName("stacked_count");

                    b.HasKey("CharacterName", "BagNumber", "PositionNumber")
                        .HasName("pk_items");

                    b.ToTable("items", "lobby");

                    b.HasData(
                        new
                        {
                            CharacterName = "YamYam",
                            BagNumber = 60,
                            PositionNumber = 0,
                            Instance = 0L,
                            IsOnBank = false,
                            ItemHash = 30957193,
                            ItemSerial = 4505093047646365909L,
                            StackedCount = 249
                        },
                        new
                        {
                            CharacterName = "YamYam",
                            BagNumber = 1,
                            PositionNumber = 0,
                            Instance = 100663296L,
                            IsOnBank = false,
                            ItemHash = 40470131,
                            ItemSerial = 4505093047647042256L,
                            StackedCount = 1
                        },
                        new
                        {
                            CharacterName = "YamYam",
                            BagNumber = 1,
                            PositionNumber = 1,
                            Instance = 134217728L,
                            IsOnBank = false,
                            ItemHash = 31536369,
                            ItemSerial = 4505093047647042688L,
                            StackedCount = 1
                        },
                        new
                        {
                            CharacterName = "YamYam",
                            BagNumber = 1,
                            PositionNumber = 2,
                            Instance = 0L,
                            IsOnBank = false,
                            ItemHash = 39720869,
                            ItemSerial = 4505093047647041772L,
                            StackedCount = 1
                        },
                        new
                        {
                            CharacterName = "YamYam",
                            BagNumber = 1,
                            PositionNumber = 3,
                            Instance = 33554432L,
                            IsOnBank = false,
                            ItemHash = 30757234,
                            ItemSerial = 4505093047647043083L,
                            StackedCount = 1
                        },
                        new
                        {
                            CharacterName = "YamYam",
                            BagNumber = 1,
                            PositionNumber = 4,
                            Instance = 100663296L,
                            IsOnBank = false,
                            ItemHash = 22096338,
                            ItemSerial = 4505093047647043489L,
                            StackedCount = 1
                        },
                        new
                        {
                            CharacterName = "YamYam",
                            BagNumber = 1,
                            PositionNumber = 5,
                            Instance = 0L,
                            IsOnBank = false,
                            ItemHash = 30992610,
                            ItemSerial = 4505093047647077184L,
                            StackedCount = 1
                        });
                });

            modelBuilder.Entity("Lunia.V4.Domain.Entities.License", b =>
                {
                    b.Property<string>("CharacterName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("character_name");

                    b.Property<int>("StageGroupHash")
                        .HasColumnType("integer")
                        .HasColumnName("stage_group_hash");

                    b.Property<int>("AccessLevel")
                        .HasColumnType("integer")
                        .HasColumnName("access_level");

                    b.HasKey("CharacterName", "StageGroupHash")
                        .HasName("pk_licenses");

                    b.ToTable("licenses", "lobby");
                });

            modelBuilder.Entity("Lunia.V4.Domain.Entities.LobbyConnection", b =>
                {
                    b.Property<string>("ServerName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("server_name");

                    b.Property<string>("AccountName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("account_name");

                    b.HasKey("ServerName", "AccountName")
                        .HasName("pk_lobby_connections");

                    b.HasIndex("AccountName")
                        .HasDatabaseName("ix_lobby_connections_account_name");

                    b.ToTable("lobby_connections", "lobby");
                });

            modelBuilder.Entity("Lunia.V4.Domain.Entities.LobbyServer", b =>
                {
                    b.Property<string>("ServerName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("server_name");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ip");

                    b.Property<int>("Port")
                        .HasColumnType("integer")
                        .HasColumnName("port");

                    b.HasKey("ServerName")
                        .HasName("pk_lobby_servers");

                    b.ToTable("lobby_servers", "lobby");
                });

            modelBuilder.Entity("Lunia.V4.Domain.Entities.SelectedCharacter", b =>
                {
                    b.Property<string>("AccountName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("account_name");

                    b.Property<string>("CharacterName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("character_name");

                    b.HasKey("AccountName", "CharacterName")
                        .HasName("pk_selected_characters");

                    b.HasIndex("CharacterName")
                        .HasDatabaseName("ix_selected_characters_character_name");

                    b.ToTable("selected_characters", "lobby");
                });

            modelBuilder.Entity("Lunia.V4.Domain.Entities.Character", b =>
                {
                    b.HasOne("Lunia.V4.Domain.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_characters_accounts_account_name");
                });

            modelBuilder.Entity("Lunia.V4.Domain.Entities.CharacterLicense", b =>
                {
                    b.HasOne("Lunia.V4.Domain.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_character_licenses_accounts_account_name");
                });

            modelBuilder.Entity("Lunia.V4.Domain.Entities.CharacterRebirth", b =>
                {
                    b.HasOne("Lunia.V4.Domain.Entities.Character", null)
                        .WithOne()
                        .HasForeignKey("Lunia.V4.Domain.Entities.CharacterRebirth", "CharacterName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_character_rebirths_characters_character_name");
                });

            modelBuilder.Entity("Lunia.V4.Domain.Entities.Item", b =>
                {
                    b.HasOne("Lunia.V4.Domain.Entities.Character", null)
                        .WithMany()
                        .HasForeignKey("CharacterName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_items_characters_character_name");
                });

            modelBuilder.Entity("Lunia.V4.Domain.Entities.License", b =>
                {
                    b.HasOne("Lunia.V4.Domain.Entities.Character", null)
                        .WithMany()
                        .HasForeignKey("CharacterName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_licenses_characters_character_name");
                });

            modelBuilder.Entity("Lunia.V4.Domain.Entities.LobbyConnection", b =>
                {
                    b.HasOne("Lunia.V4.Domain.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lobby_connections_accounts_account_name");
                });

            modelBuilder.Entity("Lunia.V4.Domain.Entities.SelectedCharacter", b =>
                {
                    b.HasOne("Lunia.V4.Domain.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_selected_characters_accounts_account_name");

                    b.HasOne("Lunia.V4.Domain.Entities.Character", null)
                        .WithMany()
                        .HasForeignKey("CharacterName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_selected_characters_characters_character_name");
                });
#pragma warning restore 612, 618
        }
    }
}
